/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.4/userguide/java_library_plugin.html
 */

 buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
}
 
 // Apply the java-library plugin to add support for Java Library
apply plugin: 'java-library'
apply plugin: 'application'


// In this section you declare where to find the dependencies of your project
repositories {
	mavenCentral()
    mavenLocal()
   
}

mainClassName="com.opentext.lhnqa.RunTests"

group = 'com.opentext'
version = '0.0.1'
description = 'LHN-QA'
sourceCompatibility = 1.8
targetCompatibility = 1.8

jar{
     version=null
   }

// Task to create complete jar with dependencies 
task buildFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'com.opentext.lhnqa.RunTests'
    }
    baseName = 'LHN-QA-Fat-jar'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

def tempFolder= new File("temp");

//Make temp folder to copy the extracts
task createTempDirs(dependsOn: buildFatJar)  {
     doLast {
 
        if (!tempFolder.exists()) {
            tempFolder.mkdirs()
        }
    }
}
 
// Copy the fat jar and resources to temp folder
task copyDistributionAndProperties(dependsOn: createTempDirs, type: Copy)  {
 
        from 'build/libs'
        include '*.jar'
        into tempFolder
 
        from 'Resources'
        include '**/*.*'
        include '*.*'
        into tempFolder
        
}
 
//Create the tar file with Jar and Resources in deployment folder
task createPackage(dependsOn: copyDistributionAndProperties, type: Tar)  {
 
        archiveName = 'LHN-QA.tar.gz'
        from tempFolder
 
        destinationDir file('deployment')
        compression = Compression.GZIP
 
        doLast {
            println(new Date(System.currentTimeMillis()).toString())
        }
 
}

//Third party dependencies
dependencies {
   				// https://mvnrepository.com/artifact/com.jayway.restassured/rest-assured
                compile group: 'com.jayway.restassured', name: 'rest-assured', version: '2.9.0'

				// https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
				compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.9.1'
    
				 // https://mvnrepository.com/artifact/org.seleniumhq.selenium/selenium-java
				compile group: 'org.seleniumhq.selenium', name: 'selenium-java', version: '3.141.59'
				
				// https://mvnrepository.com/artifact/io.github.bonigarcia/webdrivermanager
				compile group: 'io.github.bonigarcia', name: 'webdrivermanager', version: '4.2.2'

				// https://mvnrepository.com/artifact/org.testng/testng
				compile group: 'org.testng', name: 'testng', version: '7.3.0'
								
				// https://mvnrepository.com/artifact/commons-io/commons-io
				compile group: 'commons-io', name: 'commons-io', version: '2.8.0'
				
				// https://mvnrepository.com/artifact/org.yaml/snakeyaml
				compile group: 'org.yaml', name: 'snakeyaml', version: '1.27'
				
				// https://mvnrepository.com/artifact/com.fasterxml.jackson.dataformat/jackson-dataformat-yaml
				compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.12.0'
				
				 compile group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '2.3.2'
				 
				  compile group: 'org.glassfish.jaxb', name: 'jaxb-runtime', version: '2.3.2'

}


